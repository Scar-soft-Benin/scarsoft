name: Build and Test ScarSoft with Docker and MySQL

on:
    pull_request:
        branches:
            - develop

jobs:
    build-and-test:
        runs-on: ubuntu-latest

        services:
            node:
                image: node:20
                options: --name node-container
            python:
                image: python:3.10
                options: --name python-container
            mysql:
                image: mysql:8
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: test_db
                    MYSQL_USER: test_user
                    MYSQL_PASSWORD: test_pass
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping -h 127.0.0.1 --silent" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            # 1. Checkout Code
            - name: Checkout code
              uses: actions/checkout@v3

            # ----- React Client (Inside Node.js Container) -----

            # 2. Install Dependencies (React)
            - name: Install dependencies (React)
              run: docker exec node-container bash -c "cd /client && npm install"

            # 3. Linting React (ESLint)
            - name: Run ESLint (React)
              run: docker exec node-container bash -c "cd /client && npx eslint . --max-warnings=0"

            # 4. Build React App
            - name: Build React App
              run: docker exec node-container bash -c "cd /client && npm run build"

            # 5. Run Tests (React)
            - name: Run tests (React)
              run: docker exec node-container bash -c "cd /client && npm test -- --coverage"

            # ----- Python Backend (Inside Python Container) -----

            # 6. Install Dependencies (Python)
            - name: Install dependencies (Python)
              run: docker exec python-container bash -c "cd /server && pip install -r requirements.txt"

            # 7. Wait for MySQL to be Ready
            - name: Wait for MySQL to be Ready
              run: |
                  for i in {1..30}; do
                    docker exec python-container bash -c "mysqladmin ping -h mysql --silent" && break
                    sleep 2
                  done

            # 8. Run Database Migrations
            - name: Run database migrations
              run: docker exec python-container bash -c "cd /server && python manage.py migrate"

            # 9. Run Tests (Python)
            - name: Run tests (Python)
              run: docker exec python-container bash -c "cd /server && pytest --cov=./"

            # 10. Check Python Test Coverage (>= 50%)
            - name: Check test coverage (Python)
              run: |
                  COVERAGE=$(docker exec python-container bash -c "cd /server && pytest --cov=./" | grep TOTAL | awk '{print $NF}' | sed 's/%//')
                  if (( $(echo "$COVERAGE < 50" | bc -l) )); then
                    echo "Test coverage is below 50% ($COVERAGE%)"
                    exit 1
                  fi

            # 11. Run Vulnerability Check (Snyk)
            # - name: Run Snyk Vulnerability Scan
            #   uses: snyk/actions/setup@v2
            #   with:
            #     snyk-token: ${{secrets.SNYK_TOKEN}}

            # 12. Run Performance Test (Lighthouse)
            # - name: Run Lighthouse (Performance)
            #   run: |
            #     npx lighthouse https://your-site-url --output html --output-path ./lighthouse-report.html

            # ----- Code Quality -----

            # 13. Upload Coverage to Codecov
            - name: Upload coverage to Codecov
              run: bash <(curl -s https://codecov.io/bash)

            # ----- Version Compatibility -----

            # 14. Check Node.js Version
            - name: Check Node.js version
              run: node -v

            # 15. Check Python Version
            - name: Check Python version
              run: python --version

            # ----- Notifications -----

            # 16. Notify Slack if build fails
            # - name: Notify Slack if build fails
            #   if: failure()
            #   uses: slackapi/slack-github-action@v1
            - name: slack - GitHub Actions Slack integration
              uses: act10ns/slack@v2.1.0
            #   with:
            #     slack-token: ${{secrets.SLACK_TOKEN}}
            #     channel-id: 'your-channel-id'
            #     message: 'Build failed! Check the logs for details.'
